; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_lab8app_1:
	DW	0
L_lab8app_2:
	DW	0
	ALIGN	2
choose_spot_and_position:
	; >>>>> Line:	44
	; >>>>> { 
	jmp	L_lab8app_3
L_lab8app_4:
	; >>>>> Line:	49
	; >>>>> if ( type == 1 ) 
	cmp	word [bp+6], 1
	jne	L_lab8app_5
	; >>>>> Line:	51
	; >>>>> if ( orientation == 0 ) 
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_lab8app_6
	; >>>>> Line:	52
	; >>>>> YKQPost(CMsgQPtr, (void*) (id)); 
	push	word [bp+4]
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_6:
	; >>>>> Line:	55
	; >>>>> switch( long_state ) 
	mov	ax, word [L_lab8app_1]
	sub	ax, 0
	je	L_lab8app_9
	dec	ax
	je	L_lab8app_10
	dec	ax
	je	L_lab8app_11
	jmp	L_lab8app_8
L_lab8app_9:
	; >>>>> Line:	59
	; >>>>> for (i = 0; i < column; ++i) { 
	mov	word [bp-2], 0
	jmp	L_lab8app_13
L_lab8app_12:
	; >>>>> Line:	60
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 32768
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_15:
	inc	word [bp-2]
L_lab8app_13:
	mov	ax, word [bp+10]
	cmp	ax, word [bp-2]
	jg	L_lab8app_12
L_lab8app_14:
	; >>>>> Line:	62
	; >>>>> long_state = 1; 
	mov	word [L_lab8app_1], 1
	; >>>>> Line:	63
	; >>>>> break; 
	jmp	L_lab8app_7
L_lab8app_10:
	; >>>>> Line:	66
	; >>>>>  
	mov	ax, word [bp+10]
	mov	word [bp-2], ax
	jmp	L_lab8app_17
L_lab8app_16:
	; >>>>> Line:	67
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 | 0x4000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 49152
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_19:
	inc	word [bp-2]
L_lab8app_17:
	cmp	word [bp-2], 5
	jl	L_lab8app_16
L_lab8app_18:
	; >>>>> Line:	69
	; >>>>> long_state = 2; 
	mov	word [L_lab8app_1], 2
	; >>>>> Line:	70
	; >>>>> break; 
	jmp	L_lab8app_7
L_lab8app_11:
	; >>>>> Line:	73
	; >>>>> if (column < 4) { 
	cmp	word [bp+10], 4
	jge	L_lab8app_20
	; >>>>> Line:	74
	; >>>>> for (i = column; i < 4; ++i) { 
	mov	ax, word [bp+10]
	mov	word [bp-2], ax
	jmp	L_lab8app_22
L_lab8app_21:
	; >>>>> Line:	75
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 | 0x4000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 49152
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_24:
	inc	word [bp-2]
L_lab8app_22:
	cmp	word [bp-2], 4
	jl	L_lab8app_21
L_lab8app_23:
	jmp	L_lab8app_25
L_lab8app_20:
	; >>>>> Line:	79
	; >>>>> else if (column > 4) { 
	cmp	word [bp+10], 4
	jle	L_lab8app_26
	; >>>>> Line:	80
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 |  
	mov	ax, word [bp+4]
	or	ax, 32768
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_26:
L_lab8app_25:
	; >>>>> Line:	82
	; >>>>> long_state = 0; 
	mov	word [L_lab8app_1], 0
L_lab8app_8:
	; >>>>> Line:	83
	; >>>>> break; 
L_lab8app_7:
	; >>>>> Line:	85
	; >>>>> break; 
	jmp	L_lab8app_27
L_lab8app_5:
	; >>>>> Line:	91
	; >>>>> if ( corner_state == 0 ) 
	mov	ax, word [L_lab8app_2]
	test	ax, ax
	jne	L_lab8app_28
	; >>>>> Line:	93
	; >>>>> switch( orientation ) 
	mov	ax, word [bp+8]
	sub	ax, 0
	je	L_lab8app_31
	dec	ax
	je	L_lab8app_32
	dec	ax
	je	L_lab8app_33
	dec	ax
	je	L_lab8app_34
	jmp	L_lab8app_30
L_lab8app_31:
	; >>>>> Line:	96
	; >>>>> break; 
	jmp	L_lab8app_29
L_lab8app_32:
	; >>>>> Line:	99
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x4000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 16384
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	100
	; >>>>> break; 
	jmp	L_lab8app_29
L_lab8app_33:
	; >>>>> Line:	103
	; >>>>> YKQPost(CMsgQPtr, (void*) (id)); 
	push	word [bp+4]
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_34:
	; >>>>> Line:	106
	; >>>>> YKQPost(CMsgQPtr, (void*) (id)); 
	push	word [bp+4]
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_30:
	; >>>>> Line:	107
	; >>>>> break; 
L_lab8app_29:
	; >>>>> Line:	112
	; >>>>> if (column > 1) { 
	cmp	word [bp+10], 1
	jle	L_lab8app_35
	; >>>>> Line:	113
	; >>>>> for (i = column; i > 1; --i) { 
	mov	ax, word [bp+10]
	mov	word [bp-2], ax
	jmp	L_lab8app_37
L_lab8app_36:
	; >>>>> Line:	115
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 32768
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_39:
	dec	word [bp-2]
L_lab8app_37:
	cmp	word [bp-2], 1
	jg	L_lab8app_36
L_lab8app_38:
	jmp	L_lab8app_40
L_lab8app_35:
	; >>>>> Line:	118
	; >>>>> else if (column < 1) { 
	cmp	word [bp+10], 1
	jge	L_lab8app_41
	; >>>>> Line:	120
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 | 0x4000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 49152
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_41:
L_lab8app_40:
	; >>>>> Line:	122
	; >>>>> corner_state = 1; 
	mov	word [L_lab8app_2], 1
	jmp	L_lab8app_42
L_lab8app_28:
	; >>>>> Line:	126
	; >>>>> switch( orientation ) 
	mov	ax, word [bp+8]
	sub	ax, 0
	je	L_lab8app_45
	dec	ax
	je	L_lab8app_46
	dec	ax
	je	L_lab8app_47
	dec	ax
	je	L_lab8app_48
	jmp	L_lab8app_44
L_lab8app_45:
	; >>>>> Line:	130
	; >>>>> YKQPost(CMsgQPtr, (void*) (id)); 
	push	word [bp+4]
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_46:
	; >>>>> Line:	133
	; >>>>> YKQPost(CMsgQPtr, (void*) (id)); 
	push	word [bp+4]
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_47:
	; >>>>> Line:	135
	; >>>>> break; 
	jmp	L_lab8app_43
L_lab8app_48:
	; >>>>> Line:	138
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x4000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 16384
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_44:
L_lab8app_43:
	; >>>>> Line:	143
	; >>>>> if (column > 3) { 
	cmp	word [bp+10], 3
	jle	L_lab8app_49
	; >>>>> Line:	144
	; >>>>> for (i = column; i > 3; --i) { 
	mov	ax, word [bp+10]
	mov	word [bp-2], ax
	jmp	L_lab8app_51
L_lab8app_50:
	; >>>>> Line:	146
	; >>>>> on = (int)Y 
	mov	ax, word [bp+4]
	or	ax, 32768
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_53:
	dec	word [bp-2]
L_lab8app_51:
	cmp	word [bp-2], 3
	jg	L_lab8app_50
L_lab8app_52:
	jmp	L_lab8app_54
L_lab8app_49:
	; >>>>> Line:	149
	; >>>>> else if (column < 3) { 
	cmp	word [bp+10], 3
	jge	L_lab8app_55
	; >>>>> Line:	151
	; >>>>> for (i = column; i < 3; ++i) { 
	mov	ax, word [bp+10]
	mov	word [bp-2], ax
	jmp	L_lab8app_57
L_lab8app_56:
	; >>>>> Line:	152
	; >>>>> YKQPost(CMsgQPtr, (void*) (0x8000 | 0x4000 | (int)id)); 
	mov	ax, word [bp+4]
	or	ax, 49152
	push	ax
	push	word [CMsgQPtr]
	call	YKQPost
	add	sp, 4
L_lab8app_59:
	inc	word [bp-2]
L_lab8app_57:
	cmp	word [bp-2], 3
	jl	L_lab8app_56
L_lab8app_58:
L_lab8app_55:
L_lab8app_54:
	; >>>>> Line:	155
	; >>>>> corner_state = 0; 
	mov	word [L_lab8app_2], 0
L_lab8app_42:
L_lab8app_27:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_3:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_4
	ALIGN	2
PTask:
	; >>>>> Line:	160
	; >>>>> void PTask(void) { 
	jmp	L_lab8app_61
L_lab8app_62:
	; >>>>> Line:	163
	; >>>>> while(1) { 
	jmp	L_lab8app_64
L_lab8app_63:
	; >>>>> Line:	166
	; >>>>> id = YKQPend(PMsgQPtr); 
	push	word [PMsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	167
	; >>>>> type = (int)YKQPend(PMsgQPtr); 
	push	word [PMsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	168
	; >>>>> orientation = (int)Y 
	push	word [PMsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-6], ax
	; >>>>> Line:	169
	; >>>>> column = (int)YKQPend(PMsgQPtr); 
	push	word [PMsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-8], ax
	; >>>>> Line:	180
	; >>>>> choose_spot_and_position(id, type, orientation, column); 
	push	word [bp-8]
	push	word [bp-6]
	push	word [bp-4]
	push	word [bp-2]
	call	choose_spot_and_position
	add	sp, 8
L_lab8app_64:
	jmp	L_lab8app_63
L_lab8app_65:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_61:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_62
	ALIGN	2
CTask:
	; >>>>> Line:	184
	; >>>>> void CTask(void) { 
	jmp	L_lab8app_67
L_lab8app_68:
	; >>>>> Line:	188
	; >>>>> while(1) { 
	jmp	L_lab8app_70
L_lab8app_69:
	; >>>>> Line:	189
	; >>>>> tmp = (int) YKQPend(CMsgQPtr); 
	push	word [CMsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	190
	; >>>>> id = 0x3FFF & tmp; 
	mov	ax, word [bp-2]
	and	ax, 16383
	mov	word [bp-4], ax
	; >>>>> Line:	196
	; >>>>> if (0x8000 & tmp) { 
	mov	ax, word [bp-2]
	and	ax, 32768
	je	L_lab8app_72
	; >>>>> Line:	197
	; >>>>> if (0x4000 & tmp) { 
	mov	ax, word [bp-2]
	and	ax, 16384
	je	L_lab8app_73
	; >>>>> Line:	198
	; >>>>> printInt(id); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	199
	; >>>>> SlidePiece(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-4]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_74
L_lab8app_73:
	; >>>>> Line:	202
	; >>>>> SlidePiece(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-4]
	call	SlidePiece
	add	sp, 4
L_lab8app_74:
	jmp	L_lab8app_75
L_lab8app_72:
	; >>>>> Line:	206
	; >>>>> if (0x4000 & tmp) { 
	mov	ax, word [bp-2]
	and	ax, 16384
	je	L_lab8app_76
	; >>>>> Line:	207
	; >>>>> RotatePiece(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-4]
	call	RotatePiece
	add	sp, 4
	jmp	L_lab8app_77
L_lab8app_76:
	; >>>>> Line:	210
	; >>>>> RotatePiece(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-4]
	call	RotatePiece
	add	sp, 4
L_lab8app_77:
L_lab8app_75:
	; >>>>> Line:	214
	; >>>>> YKSemPend(CSemPtr); 
	push	word [CSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	215
	; >>>>> printInt(CSemPtr->value); 
	mov	si, word [CSemPtr]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	216
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab8app_70:
	jmp	L_lab8app_69
L_lab8app_71:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_67:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_lab8app_68
L_lab8app_83:
	DB	"% >>>>>",0xD,0xA,0
L_lab8app_82:
	DB	", CPU usage: ",0
L_lab8app_81:
	DB	"<<<<< Context switches: ",0
L_lab8app_80:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_79:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	222
	; >>>>> { 
	jmp	L_lab8app_84
L_lab8app_85:
	; >>>>> Line:	226
	; >>>>> seed = 1234; 
	mov	word [bp-12], 1234
	mov	word [bp-10], 0
	; >>>>> Line:	228
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	229
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab8app_79
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	230
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab8app_80
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	231
	; >>>>>  
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	232
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	233
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	234
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	235
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	237
	; >>>>> YKNewTask(PTask, (void *) &PTaskStk[4096], 20); 
	mov	al, 20
	push	ax
	mov	ax, (PTaskStk+8192)
	push	ax
	mov	ax, PTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	238
	; >>>>> YKNewTask(CTask, (void *) &CTaskStk[4096], 10); 
	mov	al, 10
	push	ax
	mov	ax, (CTaskStk+8192)
	push	ax
	mov	ax, CTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	240
	; >>>>> SeedSimptris(seed); 
	push	word [bp-10]
	push	word [bp-12]
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	241
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	243
	; >>>>> while (1) 
	jmp	L_lab8app_87
L_lab8app_86:
	; >>>>> Line:	245
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	247
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	248
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	249
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	250
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	252
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_lab8app_81
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	253
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	254
	; >>>>>  
	mov	ax, L_lab8app_82
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	255
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	256
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	257
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab8app_83
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	259
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	260
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	261
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	262
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_87:
	jmp	L_lab8app_86
L_lab8app_88:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_84:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_lab8app_85
	ALIGN	2
main:
	; >>>>> Line:	269
	; >>>>> { 
	jmp	L_lab8app_90
L_lab8app_91:
	; >>>>> Line:	270
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	271
	; >>>>> YKNewTask(STask, (void *) &STaskStk[4096], 0); 
	xor	al, al
	push	ax
	mov	ax, (STaskStk+8192)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	272
	; >>>>> CSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [CSemPtr], ax
	; >>>>> Line:	273
	; >>>>> CMsgQPtr = YKQCreate(CMsgQ, 50); 
	mov	ax, 50
	push	ax
	mov	ax, CMsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [CMsgQPtr], ax
	; >>>>> Line:	274
	; >>>>> PMsgQPtr = YKQCreate(PMsgQ, 50); 
	mov	ax, 50
	push	ax
	mov	ax, PMsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [PMsgQPtr], ax
	; >>>>> Line:	275
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_90:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_91
	ALIGN	2
PTaskStk:
	TIMES	8192 db 0
CTaskStk:
	TIMES	8192 db 0
STaskStk:
	TIMES	8192 db 0
PMsgQ:
	TIMES	100 db 0
CMsgQ:
	TIMES	100 db 0
PMsgQPtr:
	TIMES	2 db 0
CMsgQPtr:
	TIMES	2 db 0
CSemPtr:
	TIMES	2 db 0
