YKDispatcher:
; save context of YKCurrTask
    mov word [YKCurrTask],ax
    mov word [YKCurrTask+2],bx
    mov word [YKCurrTask+4],cx
    mov word [YKCurrTask+6],dx
    mov ax,[bp+2]           ; get return address
    mov word [YKCurrTask+8],ax   ; save ip
    mov ax,bp               ; get bp
    add ax,4                ; get where sp should be
    mov word [YKCurrTask+10],ax  ; save sp
    mov word [YKCurrTask+12],bp  ; save bp
    mov word [YKCurrTask+14],si  ;save si
    mov word [YKCurrTask+16],di
    mov word [YKCurrTask+18],cs
    mov word [YKCurrTask+20],ss
    mov word [YKCurrTask+22],ds
    mov word [YKCurrTask+24],es
    mov ax, YKCurrTask
    add ax, 28
    mov sp,ax               ; set sp to get ready to push flags
    pushf                   ; push flags (sp-2 <= flags)
    
    mov ax, word [YKRdyList]      ; save readylist address
    mov word [YKCurrTask],ax     ; YKCurrTask = YKRdyList
; Restore context of YKRdyList
    mov ax, word [YKRdyList]
    mov bx, word [YKRdyList+2]
    mov cx, word [YKRdyList+4]
    mov dx, word [YKRdyList+6]
    ; YKRdyList+8 is ip
    mov sp, word [YKRdyList+10] 
    mov bp, word [YKRdyList+12]
    mov si, word [YKRdyList+14]
    mov di, word [YKRdyList+16]
    mov cs, word [YKRdyList+18]
    mov ss, word [YKRdyList+20]
    mov ds, word [YKRdyList+22]
    mov es, word [YKRdyList+24]
    push word [YKRdyList+26]     ; push flags
    push word [YKRdyList+18]     ; push cs
    push word [YKRdyList+8]      ; push ip
    iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleTask:
	jmp	L_yakc_1
L_yakc_2:
L_yakc_3:
L_yakc_4:
	jmp	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKNewTask:
	jmp	L_yakc_7
L_yakc_8:
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	add	word [YKAvailTCBList], 38
	mov	si, word [bp-2]
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 16
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 18
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 20
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 22
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 24
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 26
	mov	word [si], 512
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 28
	mov	word [si], ax
	mov	si, word [bp-2]
	add	si, 30
	mov	word [si], 0
	mov	si, word [bp-2]
	add	si, 32
	mov	word [si], 0
	push	word [bp-2]
	call	YKAddReadyTask
	add	sp, 2
	mov	ax, word [YKRunFlag]
	test	ax, ax
	je	L_yakc_9
	call	YKScheduler
L_yakc_9:
	mov	sp, bp
	pop	bp
	ret
L_yakc_7:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_8
	ALIGN	2
YKInitialize:
	jmp	L_yakc_11
L_yakc_12:
	mov	word [bp-6], 100
	mov	word [YKCtxSwCount], 0
	mov	word [YKTickNum], 0
	mov	word [YKIdleCount], 0
	mov	word [YKISRDepth], 0
	mov	word [YKRunFlag], 0
	mov	word [YKRdyList], 0
	mov	word [bp-2], YKIdleTask
	mov	word [bp-4], YKIdleTaskStack
	mov	word [bp-6], 100
	mov	word [YKAvailTCBList], YKTCBArray
	push	word [bp-6]
	push	word [bp-4]
	push	word [bp-2]
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_12
	ALIGN	2
YKRun:
	jmp	L_yakc_14
L_yakc_15:
	mov	word [YKRunFlag], 1
	mov	ax, word [YKRdyList]
	mov	word [YKCurrTask], ax
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKScheduler:
	jmp	L_yakc_17
L_yakc_18:
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKCurrTask]
	je	L_yakc_19
	call	YKDispatcher
L_yakc_19:
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	jmp	L_yakc_18
	ALIGN	2
YKAddReadyTask:
	jmp	L_yakc_21
L_yakc_22:
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_23
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_24
L_yakc_23:
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	jmp	L_yakc_26
L_yakc_25:
	mov	si, word [bp-2]
	add	si, 36
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_26:
	mov	si, word [bp+4]
	add	si, 28
	mov	di, word [bp-2]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	jl	L_yakc_25
L_yakc_27:
	mov	si, word [bp+4]
	add	si, 36
	mov	ax, word [bp-2]
	mov	word [si], ax
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 36
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
L_yakc_24:
L_yakc_28:
	mov	sp, bp
	pop	bp
	ret
L_yakc_21:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_22
	ALIGN	2
main:
	jmp	L_yakc_30
L_yakc_31:
	call	YKIdleTask
	mov	ax, 1
L_yakc_32:
	mov	sp, bp
	pop	bp
	ret
L_yakc_30:
	push	bp
	mov	bp, sp
	jmp	L_yakc_31
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKISRDepth:
	TIMES	2 db 0
YKRunFlag:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKBlockList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	152 db 0
YKCurrTask:
	TIMES	2 db 0
YKIdleTaskStack:
	TIMES	512 db 0
