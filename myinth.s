; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
handleReset:
	; >>>>> Line:	11
	; >>>>> void handleReset() { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	12
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
	ALIGN	2
handleTick:
	; >>>>> Line:	16
	; >>>>> void handleTick() { 
	jmp	L_myinth_4
L_myinth_5:
	; >>>>> Line:	18
	; >>>>>  
	inc	word [YKTickNum]
	; >>>>> Line:	19
	; >>>>> current = YKBlockList; 
	mov	ax, word [YKBlockList]
	mov	word [bp-2], ax
	; >>>>> Line:	29
	; >>>>> while ( current ) 
	jmp	L_myinth_7
L_myinth_6:
	; >>>>> Line:	31
	; >>>>> if ( current->state == DELAYED ) 
	mov	si, word [bp-2]
	add	si, 30
	cmp	word [si], 1
	jne	L_myinth_9
	; >>>>> Line:	33
	; >>>>> current->delay--; 
	mov	si, word [bp-2]
	add	si, 32
	dec	word [si]
	; >>>>> Line:	34
	; >>>>> if ( !current->delay ) 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_myinth_10
	; >>>>> Line:	36
	; >>>>> current = YKUnblockTask( current ); 
	push	word [bp-2]
	call	YKUnblockTask
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	37
	; >>>>> continue; 
	jmp	L_myinth_7
L_myinth_10:
L_myinth_9:
	; >>>>> Line:	40
	; >>>>> current = current->next; 
	mov	si, word [bp-2]
	add	si, 46
	mov	ax, word [si]
	mov	word [bp-2], ax
L_myinth_7:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_myinth_6
L_myinth_8:
L_myinth_11:
	; >>>>> Line:	43
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_4:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_5
L_myinth_14:
	DB	") IGNORED",0
L_myinth_13:
	DB	"KEYPRESS (",0
	ALIGN	2
handleKeyboard:
	; >>>>> Line:	48
	; >>>>> { 
	jmp	L_myinth_15
L_myinth_16:
	; >>>>> Line:	50
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	51
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	52
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	53
	; >>>>> printChar( c ); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	54
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_myinth_14
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	55
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_15:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_16
	ALIGN	2
handleGameOver:
	; >>>>> Line:	58
	; >>>>> void handleGameOver(void) { 
	jmp	L_myinth_18
L_myinth_19:
	; >>>>> Line:	60
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_18:
	push	bp
	mov	bp, sp
	jmp	L_myinth_19
	ALIGN	2
handleNewPiece:
	; >>>>> Line:	62
	; >>>>> void handleNewPiece(void) { 
	jmp	L_myinth_21
L_myinth_22:
	; >>>>> Line:	63
	; >>>>>  
	push	word [NewPieceID]
	push	word [PMsgQPtr]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	64
	; >>>>> YKQPost(PMsgQPtr, (void*) NewPieceType); 
	push	word [NewPieceType]
	push	word [PMsgQPtr]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	65
	; >>>>> YKQPost(PMsgQPtr, (void*) NewPieceOrientation); 
	push	word [NewPieceOrientation]
	push	word [PMsgQPtr]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	66
	; >>>>> YKQPost(PMsgQPtr, (void*) NewPieceColumn); 
	push	word [NewPieceColumn]
	push	word [PMsgQPtr]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_myinth_21:
	push	bp
	mov	bp, sp
	jmp	L_myinth_22
	ALIGN	2
handleReceivedComm:
	; >>>>> Line:	69
	; >>>>> void handleReceivedComm(void) { 
	jmp	L_myinth_24
L_myinth_25:
	; >>>>> Line:	70
	; >>>>> YKSemPost(CSemPtr); 
	push	word [CSemPtr]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_24:
	push	bp
	mov	bp, sp
	jmp	L_myinth_25
	ALIGN	2
handleTouchdown:
	; >>>>> Line:	73
	; >>>>> void handleTouchdown(void) { 
	jmp	L_myinth_27
L_myinth_28:
	; >>>>> Line:	75
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_27:
	push	bp
	mov	bp, sp
	jmp	L_myinth_28
	ALIGN	2
handleLineClear:
	; >>>>> Line:	77
	; >>>>> void handleLineClear(void) { 
	jmp	L_myinth_30
L_myinth_31:
	; >>>>> Line:	79
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_30:
	push	bp
	mov	bp, sp
	jmp	L_myinth_31
